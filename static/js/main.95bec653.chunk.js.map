{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","memo","user","className","href","TodoInfo","todo","cn","TodoList","todos","map","findUserById","usersFromServer","find","getTodosWithUsers","todosFromServer","App","useState","setTodos","newTitle","setNewTitle","newUserNameId","setNewUserNameId","newTitleErrorMessage","setNewTitleErrorMessage","newUserNameIdErrorMessage","setNewUserNameIdErrorMessage","action","method","onSubmit","event","preventDefault","prev","array","newTodo","Math","max","el","type","placeholder","value","onChange","target","inputError","Boolean","errorMessageVisible","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.95bec653.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { memo } from 'react';\nimport { User } from '../../types/User';\n\ninterface Props {\n  user: User;\n}\n\nexport const UserInfo: React.FC<Props> = memo(({ user }) => {\n  const {\n    email,\n    name,\n  } = user;\n\n  return (\n    <a\n      className=\"UserInfo\"\n      href={`mailto:${email}`}\n    >\n      {name}\n    </a>\n  );\n});\n","import { memo } from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ninterface Props {\n  todo: Todo;\n}\n\nexport const TodoInfo: React.FC<Props> = memo(({ todo }) => {\n  const {\n    id,\n    completed,\n    title,\n    user,\n  } = todo;\n\n  return (\n    <>\n      <article\n        data-id={id}\n        className={cn(completed\n          ? 'TodoInfo TodoInfo--completed'\n          : 'TodoInfo')}\n      >\n        <h2 className=\"TodoInfo__title\">\n          {title}\n        </h2>\n\n        {user && <UserInfo user={user} />}\n      </article>\n    </>\n  );\n});\n","import { memo } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<Props> = memo(({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => <TodoInfo key={todo.id} todo={todo} />)}\n  </section>\n));\n","import './App.scss';\nimport cn from 'classnames';\nimport { FormEvent, useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\n\nfunction findUserById(userId: number): User | null {\n  return usersFromServer.find((user) => user.id === userId) || null;\n}\n\nfunction getTodosWithUsers(): Todo[] {\n  return todosFromServer.map(todo => ({\n    ...todo,\n    user: findUserById(todo.userId),\n  }));\n}\n\nconst getNewId = (array: { id: number }[]) => (\n  Math.max(...array.map(el => el.id)) + 1\n);\n\nexport const App = () => {\n  const [todos, setTodos] = useState(getTodosWithUsers);\n  const [newTitle, setNewTitle] = useState('');\n  const [newUserNameId, setNewUserNameId] = useState(0);\n  const [newTitleErrorMessage, setNewTitleErrorMessage] = useState('');\n  const [newUserNameIdErrorMessage, setNewUserNameIdErrorMessage]\n   = useState('');\n\n  const reset = () => {\n    setNewTitle('');\n    setNewUserNameId(0);\n  };\n\n  const heandleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!newUserNameId || !newTitle) {\n      setNewTitleErrorMessage(!newTitle ? 'Please enter a title' : '');\n      setNewUserNameIdErrorMessage(!newUserNameId\n        ? 'Please choose a user'\n        : '');\n\n      return;\n    }\n\n    setTodos(prev => {\n      const newTodo: Todo = {\n        id: getNewId(prev),\n        title: newTitle,\n        completed: false,\n        userId: newUserNameId,\n        user: findUserById(newUserNameId),\n      };\n\n      return [...prev, newTodo];\n    });\n\n    reset();\n  };\n\n  const handleChangeNewTitle = (value: string) => {\n    setNewTitle(value);\n    setNewTitleErrorMessage('');\n  };\n\n  const handleChangeNewUserNameId = (value: string) => {\n    setNewUserNameId(+value);\n    setNewUserNameIdErrorMessage('');\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={heandleSubmit}\n      >\n        <div className=\"field\">\n          <label>\n            Title:\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              value={newTitle}\n              onChange={(event) => handleChangeNewTitle(event.target.value)}\n              className={cn('input', {\n                inputError: Boolean(newTitleErrorMessage),\n              })}\n            />\n          </label>\n          <span className={cn('Please enter a title', 'error', {\n            errorMessageVisible: Boolean(newTitleErrorMessage),\n          })}\n          >\n            {newTitleErrorMessage}\n          </span>\n        </div>\n\n        <div className=\"field\">\n          <label>\n            User:\n            <select\n              data-cy=\"userSelect\"\n              value={newUserNameId}\n              onChange={(event) => handleChangeNewUserNameId(\n                event.target.value,\n              )}\n              className={cn('input', {\n                inputError: Boolean(newUserNameIdErrorMessage),\n              })}\n            >\n              <option value=\"0\" disabled>Choose a user</option>\n              {usersFromServer.map(user => (\n                <option\n                  key={user.id}\n                  value={user.id}\n                >\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n\n          <span className={cn('ErrorMessage', 'error', {\n            errorMessageVisible: Boolean(newUserNameId),\n          })}\n          >\n            {newUserNameIdErrorMessage}\n          </span>\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}